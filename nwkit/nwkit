#!/usr/bin/env python

import argparse
from distutils.util import strtobool

# Main parser
parser = argparse.ArgumentParser(description='A toolkit for Newick trees. See `nwkit SUBCOMMAND -h` for usage (e.g., nwkit constrain -h)')
subparsers = parser.add_subparsers()

# Parent parser for shared options
p_parent = argparse.ArgumentParser(add_help=False)
p_parent.add_argument('-i', '--infile', metavar='PATH', default='-', type=str, required=False, action='store',
                      help='default=%(default)s: Input newick file. Use "-" for STDIN.')
p_parent.add_argument('-o', '--outfile', metavar='PATH', default='-', type=str, required=False, action='store',
                      help='default=%(default)s: Output newick file. Use "-" for STDOUT.')
p_parent.add_argument('-f', '--format', metavar='INT', default=1, type=int, required=False, action='store',
                      help='default=%(default)s: ETE3 tree format. '
                           'See here http://etetoolkit.org/docs/latest/tutorial/tutorial_trees.html')


def command_constrain(args):
    from nwkit.constrain import constrain_main
    constrain_main(args)
pconstrain = subparsers.add_parser('constrain', help='Generate a species-tree-like Newick file for topological constraint', parents=[p_parent])
pconstrain.add_argument('--species_list', metavar='PATH', default='', type=str, required=True, action='store',
                        help='default=%(default)s: Text file containing species names, one per line. '
                             'Expected formats are "GENUS SPECIES", "GENUS_SPECIES", or "GENUS_SPECIES_OTHERINFO". '
                             'e.g., "Arabidopsis thaliana" and "Arabidopsis_thaliana_TAIR10"')
pconstrain.add_argument('--backbone', metavar='ncbi|ncbi_apgiv|ncbi_user|user', default='ncbi', type=str, required=False,
                        action='store', choices=['ncbi', 'ncbi_apgiv', 'ncbi_user', 'user'],
                        help='default=%(default)s: The backbone for tree constraint. '
                             '--infile is not required except for "user". '
                             'ncbi: Infer NCBI Taxonomy ID from species name, and generate a tree based on the ranks. '
                             'ncbi_apgiv: Infer NCBI Taxonomy ID from species name, and match it with the order-level angiosperm phylogeny in APG IV (https://doi.org/10.1111/boj.12385). '
                             'ncbi_user: Infer NCBI Taxonomy ID from species name, and match the ranks with the labels of the user-provided tree. '
                             'user: User-provided tree in --infile.')
pconstrain.add_argument('--rank', metavar='no|species|genus|family|order|...', default='no', type=str, required=False,
                        action='store',
                        help='default=%(default)s: Constrain at a particular taxonomic rank and above. '
                             'For example, if "family" is specified, "genus" and "species" are not considered. '
                             'This option is currently compatible only with --backbone ncbi')
pconstrain.add_argument('--collapse', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                        help='default=%(default)s: For tip names of "GENUS_SPECIES_OTHERINFO", '
                             'drop OTHERINFO and collapse clades if GENUS_SPECIES is identical. '
                             'The output file may be used as a species tree for phylogeny reconciliation. ')
pconstrain.set_defaults(handler=command_constrain)


def command_dist(args):
    from nwkit.dist import dist_main
    dist_main(args)
pdist = subparsers.add_parser('dist', help='Calculate topological distance', parents=[p_parent])
pdist.add_argument('-i2', '--infile2', metavar='PATH', default='', type=str, required=True, action='store',
                   help='default=%(default)s: Input newick file 2.')
pdist.add_argument('-f2', '--format2', metavar='INT', default=1, type=int, required=False, action='store',
                   help='default=%(default)s: ETE3 tree format for --infile2.')
pdist.add_argument('-d', '--dist', metavar='STR', default='RF', type=str, required=False, action='store',
                   help='default=%(default)s: Distance calculation method. RF=Robinson-Foulds')
pdist.set_defaults(handler=command_dist)


def command_drop(args):
    from nwkit.drop import drop_main
    drop_main(args)
pdrop = subparsers.add_parser('drop', help='Remove node and branch information', parents=[p_parent])
pdrop.add_argument('-t', '--target', metavar='all|root|leaf|intnode', default='all', type=str, required=False,
                   action='store',
                   choices=['all', 'root', 'leaf', 'intnode'],
                   help='default=%(default)s: Nodes to be edited.')
pdrop.add_argument('--name', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                   help='default=%(default)s: Drop node names.')
pdrop.add_argument('--support', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                   help='default=%(default)s: Drop support values.')
pdrop.add_argument('--length', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                   help='default=%(default)s: Drop branch length.')
pdrop.add_argument('--fill', metavar='STR/NUMERIC', default=None, type=str, required=False, action='store',
                   help='default=%(default)s: Fill values instead of simply dropping them.')
pdrop.set_defaults(handler=command_drop)


def command_intersection(args):
    from nwkit.intersection import intersection_main
    intersection_main(args)
pintersection = subparsers.add_parser('intersection', help='Drop non-overlapping leaves/sequences in 2 trees or tree+alignment', parents=[p_parent])
pintersection.add_argument('-i2', '--infile2', metavar='PATH', default='', type=str, required=False, action='store',
                           help='default=%(default)s: Input newick file 2. The intersected version of this file '
                                'will not be generated, so if necessary, replace --infile and --infile2 and run again.')
pintersection.add_argument('-f2', '--format2', metavar='INT', default=1, type=int, required=False, action='store',
                           help='default=%(default)s: ETE3 tree format for --infile2.')
pintersection.add_argument('-si', '--seqin', metavar='PATH', default='', type=str, required=False, action='store',
                           help='default=%(default)s: Input sequence file.')
pintersection.add_argument('-so', '--seqout', metavar='PATH', default='', type=str, required=False, action='store',
                           help='default=%(default)s: Output sequence file.')
pintersection.add_argument('-sf', '--seqformat', metavar='STR', default='fasta', type=str, required=False, action='store',
                           help='default=%(default)s: Alignment format for --seqfile. See https://biopython.org/wiki/SeqIO')
pintersection.add_argument('--match', metavar='complete|prefix|backward', default='complete', type=str,
                           required=False, action='store', choices=['complete','prefix','backward'],
                           help='default=%(default)s: Method for ID matching.')
pintersection.set_defaults(handler=command_intersection)


def command_mark(args):
    from nwkit.mark import mark_main
    mark_main(args)
pmark = subparsers.add_parser('mark', help='Search and print node labels', parents=[p_parent])
pmark.add_argument('-p', '--pattern', metavar='REGEX', default='.*', type=str, required=True, action='store',
                   help='default=%(default)s: Regular expression for label search.')
pmark.add_argument('-t', '--target', metavar='all|root|leaf|intnode', default='all', type=str, required=False,
                   action='store', choices=['all', 'root', 'leaf', 'intnode'],
                   help='default=%(default)s: Nodes to be searched.')
pmark.add_argument('--mrca', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                   help='default=%(default)s: Mark the label of the most-recent common ancestor instead of targets.')
pmark.add_argument('--target_only_clade', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                   help='default=%(default)s: Mark the label of MRCA whose clade contains only targets. '
                        'Use with --mrca yes.')
pmark.add_argument('--insert_txt', metavar='STR', default='#1', type=str, required=True, action='store',
                   help='default=%(default)s: Label to insert to the target node labels.')
pmark.add_argument('--insert_sep', metavar='STR', default='', type=str, required=False, action='store',
                   help='default=%(default)s: Separator for --insert_txt.')
pmark.add_argument('--insert_pos', metavar='prefix|suffix', default='suffix', type=str, required=False,
                   action='store', choices=['prefix', 'suffix'],
                   help='default=%(default)s: Place to insert --insert_txt.')
pmark.set_defaults(handler=command_mark)


def command_mcmctree(args):
    from nwkit.mcmctree import mcmctree_main
    mcmctree_main(args)
pmcmctree = subparsers.add_parser('mcmctree', help='Introduce divergence time constraints on the command line', parents=[p_parent])
pmcmctree.add_argument('--left_species', metavar='STR', default=None, type=str, required=False,
                       help='default=%(default)s: Any species in the left clade. '
                            'If you want to set a bound on the node splitting Homo_sapiens and Mus_musculus, '
                            'specify one of them (e.g., Homo_sapiens).')
pmcmctree.add_argument('--right_species', metavar='STR', default=None, type=str, required=False,
                       help='default=%(default)s: Any species in the right clade deriving from the common ancestor. If '
                            'you want to set a bound on the node splitting Homo_sapiens and Mus_musculus, specify the '
                            'other one that is not used as the left species (e.g., Mus_musculus).')
pmcmctree.add_argument('--lower_bound', metavar='FLOAT', default=None, type=str,
                       help='default=%(default)s: Lower bound of the calibration point.')
pmcmctree.add_argument('--lower_offset', metavar='FLOAT', default='0.1', type=str, help='default=%(default)s: ')
pmcmctree.add_argument('--lower_scale', metavar='FLOAT', default='1', type=str, help='default=%(default)s: ')
pmcmctree.add_argument('--lower_tailProb', metavar='FLOAT', default='0.025', type=str,
                       help='default=%(default)s: Lower tail probability. Use 1e-300 for hard bound. Default=0.025')
pmcmctree.add_argument('--upper_bound', metavar='FLOAT', default=None, type=str,
                       help='default=%(default)s: Upper bound of the calibration point. A point estimate can be '
                            'specified by setting the same age in both lower and upper bounds '
                            '(e.g., --lower_bound 5.2 --upper_bound 5.2)')
pmcmctree.add_argument('--upper_tailProb', metavar='FLOAT', default='0.025', type=str,
                       help='default=%(default)s: Upper tail probability. Use 1e-300 for hard bound. Default=0.025')
pmcmctree.add_argument('--add_header', action='store_true',
                       help='default=%(default)s: Add the header required for mcmctree.')
pmcmctree.add_argument('--timetree', metavar='point|ci|no', default='no', type=str, required=False, action='store',
                       choices=['point', 'ci', 'no'],
                        help='default=%(default)s: Obtain the divergence time from timetree.org. '
                             'point: point estimate, ci: 95% confidence interval as upper and lower bounds. '
                             'no: disable the function.')
pmcmctree.set_defaults(handler=command_mcmctree)


def command_nhx2nwk(args):
    from nwkit.nhx2nwk import nhx2nwk_main
    nhx2nwk_main(args)
pnhx2nwk = subparsers.add_parser('nhx2nwk', help='Generate Newick from NHX', parents=[p_parent])
pnhx2nwk.add_argument('-p', '--node_label', metavar='B|D|H|S|...', default='', type=str, required=False, action='store',
                         help='default=%(default)s: NHX attribute to use as internal node labels.')
pnhx2nwk.set_defaults(handler=command_nhx2nwk)


def command_printlabel(args):
    from nwkit.printlabel import printlabel_main
    printlabel_main(args)
pprintlabel = subparsers.add_parser('printlabel', help='Search and print node labels', parents=[p_parent])
pprintlabel.add_argument('-p', '--pattern', metavar='STR', default='.*', type=str, required=True, action='store',
                         help='default=%(default)s: Regular expression for label search.')
pprintlabel.add_argument('-t', '--target', metavar='all|root|leaf|intnode', default='all', type=str, required=False,
                         action='store',
                         choices=['all', 'root', 'leaf', 'intnode'],
                         help='default=%(default)s: Nodes to be searched.')
pprintlabel.add_argument('--sister', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                         help='default=%(default)s: Show labels of the sisters instead of targets.')
pprintlabel.set_defaults(handler=command_printlabel)


def command_root(args):
    from nwkit.root import root_main
    root_main(args)
proot = subparsers.add_parser('root', help='Place or transfer the tree root', parents=[p_parent])
proot.add_argument('-i2', '--infile2', metavar='PATH', default='', type=str, required=False, action='store',
                   help='default=%(default)s: Input newick file 2. Used when --method "transfer". '
                        'Leaf labels should be matched to those in --infile.')
proot.add_argument('-f2', '--format2', metavar='INT', default=1, type=int, required=False, action='store',
                   help='default=%(default)s: ETE3 tree format for --infile2.')
proot.add_argument('--method', metavar='STR', default='midpoint', type=str, required=False, action='store',
                   choices=['midpoint','outgroup','transfer',],
                   help='default=%(default)s: '
                        'midpoint: Midpoint rooting. '
                        'midpoint: Outgroup rooting with --outgroup. '
                        'transfer: Transfer the root position from --infile2 to --infile. '
                        'The two trees should have the same bipartitions at the root node.')
proot.add_argument('--outgroup', metavar='STR', default='', type=str, required=False, action='store',
                   help='default=%(default)s: An outgroup label or a comma-separated list of outgroup labels. '
                        'For the latter, the clade containing all specified labels are used as an outgroup, '
                        'so all labels do not have to be specified for a large clade.')
proot.set_defaults(handler=command_root)


def command_sanitize(args):
    from nwkit.sanitize import sanitize_main
    sanitize_main(args)
psanitize = subparsers.add_parser('sanitize', help='Eliminate non-standard Newick flavors', parents=[p_parent])
psanitize.add_argument('--remove_singleton', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                       help='default=%(default)s: Remove singleton nodes represented as double brackets.')
psanitize.add_argument('--name_quote', metavar='none|single|double', default='none', type=str, required=False,
                       action='store', choices=['none','single','double'],
                       help='default=%(default)s: Quotation of node and leaf names.'
                            'none = no quote, single = \', double = \" ')
psanitize.set_defaults(handler=command_sanitize)


def command_subtree(args):
    from nwkit.subtree import subtree_main
    subtree_main(args)
psubtree = subparsers.add_parser('subtree', help='Generate a subtree Newick file', parents=[p_parent])
psubtree.add_argument('--left_leaf', metavar='STR', default=None, type=str, required=True,
                      help='default=%(default)s: Any leaf names in the left clade. For example, '
                           'to extract the subtree with the root node splitting Homo_sapiens and Mus_musculus, '
                           'specify one of them (e.g., Homo_sapiens).')
psubtree.add_argument('--right_leaf', metavar='STR', default=None, type=str, required=True,
                      help='default=%(default)s: Any leaf names in the right clade. For example, '
                           'to extract the subtree with the root node splitting Homo_sapiens and Mus_musculus, '
                           'specify the other one that is not used as --left_leaf (e.g., Mus_musculus).')
psubtree.set_defaults(handler=command_subtree)


def command_shuffle(args):
    from nwkit.shuffle import shuffle_main
    shuffle_main(args)
pshuffle = subparsers.add_parser('shuffle', help='Shuffle branches and/or labels', parents=[p_parent])
pshuffle.add_argument('--topology', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                       help='default=%(default)s: Randomize entire tree topology and branch length. '
                            'Without --label yes, new topology preserve the leaf label orders and is not completely randomized.')
pshuffle.add_argument('--branch_length', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                       help='default=%(default)s: Shuffle branch length. Automatically activated when --topology yes.')
pshuffle.add_argument('--label', metavar='yes|no', default='no', type=strtobool, required=False, action='store',
                       help='default=%(default)s: Shuffle leaf labels.')
pshuffle.set_defaults(handler=command_shuffle)


def command_help(args):
    print(parser.parse_args([args.command, '--help']))

parser_help = subparsers.add_parser('help', help='Show help messages')
parser_help.add_argument('command', help='command name which help is shown')
parser_help.set_defaults(handler=command_help)


# Handler
args = parser.parse_args()
if hasattr(args, 'handler'):
    args.handler(args)
else:
    parser.print_help()
